{"ast":null,"code":"var _jsxFileName = \"/Users/linoyhorvat/Documents/bootcamp/Git/Projects/mid-project/songTrivia/src/components/Lyric.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport XMLParser from 'react-xml-parser';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Lyric = _ref => {\n  _s();\n\n  let {\n    songName,\n    artistName\n  } = _ref;\n  const [isLoading, setLoading] = useState(false);\n  const [lyrics, setLyrics] = useState(null);\n  const [isOn, setIsOn] = useState(false);\n  const [btnTxt, setBtnTxt] = useState(\"read-more\");\n  const [changedTxt, setChangeTxt] = useState(newText);\n  let newText = text.substring(0, maxLength) + \"...\";\n  const maxLength = 700;\n  let style = {\n    display: \"none\",\n    color: \"blue\",\n    cursor: \"pointer\"\n  };\n\n  const getData = async () => {\n    setLoading(true);\n    const {\n      data\n    } = await axios.get(`https://intense-mesa-62220.herokuapp.com/http://api.chartlyrics.com/apiv1.asmx/SearchLyricDirect?artist=${artistName}&song=${songName}`);\n    var xml = new XMLParser().parseFromString(data);\n    const data1 = xml.children[9].value;\n\n    if (data1.length > maxLength) {\n      style.display = \"inline-block\";\n      let data2 = data1.slice(0, maxLength) + '...☞';\n    }\n\n    setLyrics(data1);\n    setLoading(false);\n  };\n\n  const handleTxt = text => {\n    if (!isOn) {\n      // setChangeTxt(text);\n      setIsOn(true);\n      setBtnTxt(\"read-more\");\n    } else {// setChangeTxt(newText);\n      // setIsOn(false);\n      // setBtnTxt(\"show-less\");\n    }\n  };\n\n  useEffect(async () => {\n    getData();\n  }, [songName]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"lyrics\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: songName.split('%20').join(' ').toLowerCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 20\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: lyrics\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 44\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: style,\n      onClick: () => handleTxt(text)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), btnTxt]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Lyric, \"2qkTwdC/QyK69BUideS2NAKCusA=\");\n\n_c = Lyric;\nexport default Lyric;\n\nvar _c;\n\n$RefreshReg$(_c, \"Lyric\");","map":{"version":3,"sources":["/Users/linoyhorvat/Documents/bootcamp/Git/Projects/mid-project/songTrivia/src/components/Lyric.js"],"names":["React","useState","useEffect","axios","XMLParser","Lyric","songName","artistName","isLoading","setLoading","lyrics","setLyrics","isOn","setIsOn","btnTxt","setBtnTxt","changedTxt","setChangeTxt","newText","text","substring","maxLength","style","display","color","cursor","getData","data","get","xml","parseFromString","data1","children","value","length","data2","slice","handleTxt","split","join","toLowerCase"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;;;AAIA,MAAMC,KAAK,GAAG,QAA4B;AAAA;;AAAA,MAA3B;AAACC,IAAAA,QAAD;AAAWC,IAAAA;AAAX,GAA2B;AACxC,QAAM,CAACC,SAAD,EAAYC,UAAZ,IAA0BR,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACS,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,IAAD,CAApC;AACA,QAAM,CAACW,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAM,CAACa,MAAD,EAASC,SAAT,IAAsBd,QAAQ,CAAC,WAAD,CAApC;AAEA,QAAM,CAACe,UAAD,EAAaC,YAAb,IAA6BhB,QAAQ,CAACiB,OAAD,CAA3C;AACA,MAAIA,OAAO,GAAGC,IAAI,CAACC,SAAL,CAAe,CAAf,EAAkBC,SAAlB,IAA+B,KAA7C;AAGA,QAAMA,SAAS,GAAG,GAAlB;AACA,MAAIC,KAAK,GAAG;AACVC,IAAAA,OAAO,EAAE,MADC;AAEVC,IAAAA,KAAK,EAAE,MAFG;AAGVC,IAAAA,MAAM,EAAE;AAHE,GAAZ;;AAMA,QAAMC,OAAO,GAAG,YAAY;AAC1BjB,IAAAA,UAAU,CAAC,IAAD,CAAV;AACA,UAAM;AAAEkB,MAAAA;AAAF,QAAW,MAAMxB,KAAK,CAACyB,GAAN,CACpB,2GAA0GrB,UAAW,SAAQD,QAAS,EADlH,CAAvB;AAGA,QAAIuB,GAAG,GAAG,IAAIzB,SAAJ,GAAgB0B,eAAhB,CAAgCH,IAAhC,CAAV;AACA,UAAMI,KAAK,GAAGF,GAAG,CAACG,QAAJ,CAAa,CAAb,EAAgBC,KAA9B;;AACA,QAAIF,KAAK,CAACG,MAAN,GAAeb,SAAnB,EAA8B;AAC5BC,MAAAA,KAAK,CAACC,OAAN,GAAgB,cAAhB;AACA,UAAIY,KAAK,GAAGJ,KAAK,CAACK,KAAN,CAAY,CAAZ,EAAcf,SAAd,IAAyB,MAArC;AACD;;AACDV,IAAAA,SAAS,CAACoB,KAAD,CAAT;AACAtB,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GAbD;;AAcA,QAAM4B,SAAS,GAAIlB,IAAD,IAAU;AAC1B,QAAI,CAACP,IAAL,EAAW;AACT;AACAC,MAAAA,OAAO,CAAC,IAAD,CAAP;AACAE,MAAAA,SAAS,CAAC,WAAD,CAAT;AACD,KAJD,MAIO,CACL;AACA;AACA;AACD;AACF,GAVD;;AAYAb,EAAAA,SAAS,CAAC,YAAY;AACpBwB,IAAAA,OAAO;AACR,GAFQ,EAEN,CAACpB,QAAD,CAFM,CAAT;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA,4BACA;AAAA,gBAAMA,QAAQ,CAACgC,KAAT,CAAe,KAAf,EAAsBC,IAAtB,CAA2B,GAA3B,EAAgCC,WAAhC;AAAN;AAAA;AAAA;AAAA;AAAA,YADA,EAEGhC,SAAS,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAH,gBAA2B;AAAA,gBAAME;AAAN;AAAA;AAAA;AAAA;AAAA,YAFvC,eAGE;AAAK,MAAA,KAAK,EAAEY,KAAZ;AAAmB,MAAA,OAAO,EAAE,MAAMe,SAAS,CAAClB,IAAD;AAA3C;AAAA;AAAA;AAAA;AAAA,YAHF,EAIGL,MAJH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CAvDD;;GAAMT,K;;KAAAA,K;AAyDN,eAAeA,KAAf","sourcesContent":["import React from 'react'\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport XMLParser from 'react-xml-parser';\n\n\n\nconst Lyric = ({songName, artistName}) => {\n  const [isLoading, setLoading] = useState(false);\n  const [lyrics, setLyrics] = useState(null);\n  const [isOn, setIsOn] = useState(false);\n  const [btnTxt, setBtnTxt] = useState(\"read-more\");\n  \n  const [changedTxt, setChangeTxt] = useState(newText);\n  let newText = text.substring(0, maxLength) + \"...\";\n\n\n  const maxLength = 700;\n  let style = {\n    display: \"none\",\n    color: \"blue\",\n    cursor: \"pointer\",\n  };\n\n  const getData = async () => {\n    setLoading(true);\n    const { data } = await axios.get(\n      `https://intense-mesa-62220.herokuapp.com/http://api.chartlyrics.com/apiv1.asmx/SearchLyricDirect?artist=${artistName}&song=${songName}`\n    );\n    var xml = new XMLParser().parseFromString(data); \n    const data1 = xml.children[9].value\n    if (data1.length > maxLength) {\n      style.display = \"inline-block\";\n      let data2 = data1.slice(0,maxLength)+'...☞'\n    }\n    setLyrics(data1);\n    setLoading(false);\n  }\n  const handleTxt = (text) => {\n    if (!isOn) {\n      // setChangeTxt(text);\n      setIsOn(true);\n      setBtnTxt(\"read-more\");\n    } else {\n      // setChangeTxt(newText);\n      // setIsOn(false);\n      // setBtnTxt(\"show-less\");\n    }\n  };\n\n  useEffect(async () => {\n    getData()\n  }, [songName]);\n\n  return (\n    <div className=\"lyrics\">\n    <div>{songName.split('%20').join(' ').toLowerCase()}</div>\n      {isLoading ? <div>loading...</div> : <div>{lyrics}</div>}\n      <div style={style} onClick={() => handleTxt(text)}></div>\n      {btnTxt}\n    </div>\n  )\n}\n\nexport default Lyric\n"]},"metadata":{},"sourceType":"module"}