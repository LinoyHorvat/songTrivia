{"ast":null,"code":"var _jsxFileName = \"/Users/linoyhorvat/Documents/bootcamp/Git/Projects/mid-project/songTrivia/src/components/Lyric.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport XMLParser from 'react-xml-parser';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Lyric = () => {\n  _s();\n\n  const songsArr = ['we%20will%20rock%20you', 'frozen', 'Beat%20It', 'Smells%20Like%20Teen%20Spirit', 'Billie%20Jean'];\n  const artistsArr = ['queen', 'madonna', 'Michael%20Jackson', 'Nirvana', 'Michael%20Jackson'];\n  const [songChoice, setChoice] = useState(null);\n  const [isLoading, setLoading] = useState(false);\n  const [lyrics, setLyrics] = useState(null);\n\n  const randomChoice = () => {\n    let random = Math.floor(songsArr.length * Math.random());\n    setChoice(random);\n    console.log(random);\n  };\n\n  const getData = async (songName, artistName) => {\n    setLoading(true);\n    const {\n      data\n    } = await axios.get(`https://intense-mesa-62220.herokuapp.com/http://api.chartlyrics.com/apiv1.asmx/SearchLyricDirect?artist=${artistName}&song=${songName}`);\n    var xml = new XMLParser().parseFromString(data);\n    const data1 = xml.children[9].value;\n    console.log(data1);\n    setLyrics(data1);\n    setLoading(false);\n  };\n\n  useEffect(async () => {\n    setLoading(true);\n    randomChoice();\n    console.log(`${songsArr[songChoice]} ${artistsArr[songChoice]}`); // getData(songsArr[songChoice], artistsArr[songChoice]);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: lyrics\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Lyric, \"Gc2fr+J2uNP4wMq1ddiDU97QV/E=\");\n\n_c = Lyric;\nexport default Lyric;\n\nvar _c;\n\n$RefreshReg$(_c, \"Lyric\");","map":{"version":3,"sources":["/Users/linoyhorvat/Documents/bootcamp/Git/Projects/mid-project/songTrivia/src/components/Lyric.js"],"names":["React","useState","useEffect","axios","XMLParser","Lyric","songsArr","artistsArr","songChoice","setChoice","isLoading","setLoading","lyrics","setLyrics","randomChoice","random","Math","floor","length","console","log","getData","songName","artistName","data","get","xml","parseFromString","data1","children","value"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;;;AAGA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAClB,QAAMC,QAAQ,GAAG,CAAC,wBAAD,EAA2B,QAA3B,EAAqC,WAArC,EAAiD,+BAAjD,EAAiF,eAAjF,CAAjB;AACA,QAAMC,UAAU,GAAE,CAAC,OAAD,EAAU,SAAV,EAAoB,mBAApB,EAAwC,SAAxC,EAAkD,mBAAlD,CAAlB;AACA,QAAM,CAACC,UAAD,EAAaC,SAAb,IAA0BR,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACS,SAAD,EAAYC,UAAZ,IAA0BV,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACW,MAAD,EAASC,SAAT,IAAsBZ,QAAQ,CAAC,IAAD,CAApC;;AAEA,QAAMa,YAAY,GAAG,MAAM;AACzB,QAAIC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWX,QAAQ,CAACY,MAAT,GAAgBF,IAAI,CAACD,MAAL,EAA3B,CAAb;AACAN,IAAAA,SAAS,CAACM,MAAD,CAAT;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYL,MAAZ;AACD,GAJD;;AAMA,QAAMM,OAAO,GAAG,OAAMC,QAAN,EAAeC,UAAf,KAA8B;AAC5CZ,IAAAA,UAAU,CAAC,IAAD,CAAV;AACA,UAAM;AAAEa,MAAAA;AAAF,QAAW,MAAMrB,KAAK,CAACsB,GAAN,CACpB,2GAA0GF,UAAW,SAAQD,QAAS,EADlH,CAAvB;AAGA,QAAII,GAAG,GAAG,IAAItB,SAAJ,GAAgBuB,eAAhB,CAAgCH,IAAhC,CAAV;AACA,UAAMI,KAAK,GAAGF,GAAG,CAACG,QAAJ,CAAa,CAAb,EAAgBC,KAA9B;AACAX,IAAAA,OAAO,CAACC,GAAR,CAAYQ,KAAZ;AACAf,IAAAA,SAAS,CAACe,KAAD,CAAT;AACAjB,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GAVD;;AAYAT,EAAAA,SAAS,CAAC,YAAY;AACpBS,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAG,IAAAA,YAAY;AACZK,IAAAA,OAAO,CAACC,GAAR,CAAa,GAAEd,QAAQ,CAACE,UAAD,CAAa,IAAGD,UAAU,CAACC,UAAD,CAAa,EAA9D,EAHoB,CAIpB;AACD,GALQ,EAKN,EALM,CAAT;AAMA,sBACE;AAAA,cACGI;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CArCD;;GAAMP,K;;KAAAA,K;AAuCN,eAAeA,KAAf","sourcesContent":["import React from 'react'\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport XMLParser from 'react-xml-parser';\n\n\nconst Lyric = () => {\n  const songsArr = ['we%20will%20rock%20you', 'frozen', 'Beat%20It','Smells%20Like%20Teen%20Spirit','Billie%20Jean']\n  const artistsArr =['queen', 'madonna','Michael%20Jackson','Nirvana','Michael%20Jackson']\n  const [songChoice, setChoice] = useState(null);\n  const [isLoading, setLoading] = useState(false);\n  const [lyrics, setLyrics] = useState(null);\n  \n  const randomChoice = () => {\n    let random = Math.floor(songsArr.length*Math.random());\n    setChoice(random)\n    console.log(random);\n  }\n\n  const getData = async(songName,artistName) => {\n    setLoading(true)\n    const { data } = await axios.get(\n      `https://intense-mesa-62220.herokuapp.com/http://api.chartlyrics.com/apiv1.asmx/SearchLyricDirect?artist=${artistName}&song=${songName}`\n    );\n    var xml = new XMLParser().parseFromString(data); \n    const data1 = xml.children[9].value\n    console.log(data1);\n    setLyrics(data1);\n    setLoading(false);\n  }\n\n  useEffect(async () => {\n    setLoading(true);\n    randomChoice();\n    console.log(`${songsArr[songChoice]} ${artistsArr[songChoice]}`);\n    // getData(songsArr[songChoice], artistsArr[songChoice]);\n  }, []);\n  return (\n    <div>\n      {lyrics}\n      \n    </div>\n  )\n}\n\nexport default Lyric\n"]},"metadata":{},"sourceType":"module"}