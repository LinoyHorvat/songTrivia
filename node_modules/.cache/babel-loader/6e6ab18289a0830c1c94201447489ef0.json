{"ast":null,"code":"var _jsxFileName = \"/Users/linoyhorvat/Documents/bootcamp/Git/Projects/mid-project/songTrivia/src/components/Lyric.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport XMLParser from 'react-xml-parser';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Lyric = _ref => {\n  _s();\n\n  let {\n    songName,\n    artistName\n  } = _ref;\n  const [isLoading, setLoading] = useState(false);\n  const [lyrics, setLyrics] = useState(null);\n  const [songName2, setSongName2] = useState(songName);\n\n  const getData = async () => {\n    setLoading(true);\n    const {\n      data\n    } = await axios.get(`https://intense-mesa-62220.herokuapp.com/http://api.chartlyrics.com/apiv1.asmx/SearchLyricDirect?artist=${artistName}&song=${songName}`);\n    var xml = new XMLParser().parseFromString(data);\n    const data1 = xml.children[9].value;\n    setLyrics(data1);\n    setLoading(false);\n  };\n\n  useEffect(async () => {\n    getData();\n  }, [songName2]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [setSongName2(songName2), isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 20\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: lyrics\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 41\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Lyric, \"W9QvmR9VpY0Ij1DPNZZ1L4caaEM=\");\n\n_c = Lyric;\nexport default Lyric;\n\nvar _c;\n\n$RefreshReg$(_c, \"Lyric\");","map":{"version":3,"sources":["/Users/linoyhorvat/Documents/bootcamp/Git/Projects/mid-project/songTrivia/src/components/Lyric.js"],"names":["React","useState","useEffect","axios","XMLParser","Lyric","songName","artistName","isLoading","setLoading","lyrics","setLyrics","songName2","setSongName2","getData","data","get","xml","parseFromString","data1","children","value"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;;;AAGA,MAAMC,KAAK,GAAG,QAA4B;AAAA;;AAAA,MAA3B;AAACC,IAAAA,QAAD;AAAWC,IAAAA;AAAX,GAA2B;AACxC,QAAM,CAACC,SAAD,EAAYC,UAAZ,IAA0BR,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACS,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,IAAD,CAApC;AACA,QAAM,CAACW,SAAD,EAAYC,YAAZ,IAA2BZ,QAAQ,CAACK,QAAD,CAAzC;;AAEA,QAAMQ,OAAO,GAAG,YAAY;AAC1BL,IAAAA,UAAU,CAAC,IAAD,CAAV;AACA,UAAM;AAAEM,MAAAA;AAAF,QAAW,MAAMZ,KAAK,CAACa,GAAN,CACpB,2GAA0GT,UAAW,SAAQD,QAAS,EADlH,CAAvB;AAGA,QAAIW,GAAG,GAAG,IAAIb,SAAJ,GAAgBc,eAAhB,CAAgCH,IAAhC,CAAV;AACA,UAAMI,KAAK,GAAGF,GAAG,CAACG,QAAJ,CAAa,CAAb,EAAgBC,KAA9B;AACAV,IAAAA,SAAS,CAACQ,KAAD,CAAT;AACAV,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GATD;;AAWAP,EAAAA,SAAS,CAAC,YAAY;AACpBY,IAAAA,OAAO;AACR,GAFQ,EAEN,CAACF,SAAD,CAFM,CAAT;AAIA,sBACE;AAAA,eACCC,YAAY,CAACD,SAAD,CADb,EAEGJ,SAAS,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAH,gBAAwB;AAAA,gBAAME;AAAN;AAAA;AAAA;AAAA;AAAA,YAFpC;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CA1BD;;GAAML,K;;KAAAA,K;AA4BN,eAAeA,KAAf","sourcesContent":["import React from 'react'\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport XMLParser from 'react-xml-parser';\n\n\nconst Lyric = ({songName, artistName}) => {\n  const [isLoading, setLoading] = useState(false);\n  const [lyrics, setLyrics] = useState(null);\n  const [songName2, setSongName2]= useState(songName);\n\n  const getData = async () => {\n    setLoading(true);\n    const { data } = await axios.get(\n      `https://intense-mesa-62220.herokuapp.com/http://api.chartlyrics.com/apiv1.asmx/SearchLyricDirect?artist=${artistName}&song=${songName}`\n    );\n    var xml = new XMLParser().parseFromString(data); \n    const data1 = xml.children[9].value\n    setLyrics(data1);\n    setLoading(false);\n  }\n\n  useEffect(async () => {\n    getData()\n  }, [songName2]);\n\n  return (\n    <div>\n    {setSongName2(songName2)}\n      {isLoading ? <div>loading</div> : <div>{lyrics}</div>}\n    </div>\n  )\n}\n\nexport default Lyric\n"]},"metadata":{},"sourceType":"module"}