{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SongsClient = void 0;\n\nconst got_1 = __importDefault(require(\"got\"));\n\nconst Song_1 = require(\"./Song\");\n\nconst Constants_1 = require(\"../Constants\");\n\nclass SongsClient {\n  /**\r\n   * @example const SongsClient = new Genius.Songs.Client(key);\r\n   */\n  constructor(client) {\n    this.client = client;\n  }\n  /**\r\n   * Searches for songs for the provided query (Key is optional)\r\n   * @example const SearchResults = await SongsClient.search(\"faded\");\r\n   */\n\n\n  search(query, options) {\n    var _a, _b, _c, _d;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        sanitizeQuery\n      } = Object.assign({\n        sanitizeQuery: true\n      }, options);\n\n      if (typeof query !== \"string\") {\n        throw new Error(\"'query' must be a type of 'string'\");\n      }\n\n      const term = encodeURIComponent(sanitizeQuery ? this.sanitizeQuery(query) : query);\n      let result = [];\n\n      if (this.client.key) {\n        const data = yield this.client.api.get(`/search?q=${term}`);\n        const parsed = JSON.parse(data);\n        result = parsed.response.hits;\n      } else {\n        const res = yield got_1.default.get(`${((_a = this.client.config.origin) === null || _a === void 0 ? void 0 : _a.url) || Constants_1.Constants.UN_BASE_URL}/search/multi?per_page=5&q=${term}`, Object.assign(Object.assign({}, this.client.config.requestOptions), {\n          headers: Object.assign({\n            \"User-Agent\": Constants_1.Constants.DEF_USER_AGENT\n          }, (_b = this.client.config.requestOptions) === null || _b === void 0 ? void 0 : _b.headers)\n        }));\n        const parsed = JSON.parse(res.body);\n\n        if (!((_c = parsed === null || parsed === void 0 ? void 0 : parsed.response) === null || _c === void 0 ? void 0 : _c.sections)) {\n          throw new Error(Constants_1.Constants.NO_RESULT);\n        }\n\n        const __hits = parsed.response.sections.find(s => s.type === \"song\");\n\n        if (!((_d = __hits === null || __hits === void 0 ? void 0 : __hits.hits) === null || _d === void 0 ? void 0 : _d.length)) {\n          throw new Error(Constants_1.Constants.NO_RESULT);\n        }\n\n        result = __hits.hits;\n      }\n\n      return result.filter(s => s.type === \"song\").map(s => new Song_1.Song(this.client, s.result, true));\n    });\n  }\n  /**\r\n   * Fetches the Song using the provided ID (Requires Key)\r\n   * @example const Song = await SongsClient.get(3276244);\r\n   */\n\n\n  get(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (typeof id !== \"number\") {\n        throw new Error(\"'id' must be a type of 'number'\");\n      }\n\n      if (!this.client.key) {\n        throw new Error(Constants_1.Constants.REQUIRES_KEY);\n      }\n\n      const data = yield this.client.api.get(`/songs/${id}`);\n      const parsed = JSON.parse(data);\n      return new Song_1.Song(this.client, parsed.response.song, false);\n    });\n  } // Source: https://github.com/farshed/genius-lyrics-api/blob/110397a9f05fe20c4ded92418430f665f074c4e4/lib/utils/index.js#L15\n\n\n  sanitizeQuery(query) {\n    return query.toLowerCase().replace(/ *\\([^)]*\\) */g, \"\").replace(/ *\\[[^\\]]*]/, \"\").replace(/feat.|ft./g, \"\").replace(/\\s+/g, \" \").trim();\n  }\n\n}\n\nexports.SongsClient = SongsClient;","map":{"version":3,"sources":["/Users/linoyhorvat/Documents/bootcamp/Git/Projects/mid-project/songTrivia/node_modules/genius-lyrics/dist/Songs/Client.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__importDefault","mod","__esModule","Object","defineProperty","exports","SongsClient","got_1","require","Song_1","Constants_1","constructor","client","search","query","options","_a","_b","_c","_d","sanitizeQuery","assign","Error","term","encodeURIComponent","key","data","api","get","parsed","JSON","parse","response","hits","res","default","config","origin","url","Constants","UN_BASE_URL","requestOptions","headers","DEF_USER_AGENT","body","sections","NO_RESULT","__hits","find","s","type","length","filter","map","Song","id","REQUIRES_KEY","song","toLowerCase","replace","trim"],"mappings":"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","sourcesContent":["\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SongsClient = void 0;\r\nconst got_1 = __importDefault(require(\"got\"));\r\nconst Song_1 = require(\"./Song\");\r\nconst Constants_1 = require(\"../Constants\");\r\nclass SongsClient {\r\n    /**\r\n     * @example const SongsClient = new Genius.Songs.Client(key);\r\n     */\r\n    constructor(client) {\r\n        this.client = client;\r\n    }\r\n    /**\r\n     * Searches for songs for the provided query (Key is optional)\r\n     * @example const SearchResults = await SongsClient.search(\"faded\");\r\n     */\r\n    search(query, options) {\r\n        var _a, _b, _c, _d;\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { sanitizeQuery } = Object.assign({ sanitizeQuery: true }, options);\r\n            if (typeof query !== \"string\") {\r\n                throw new Error(\"'query' must be a type of 'string'\");\r\n            }\r\n            const term = encodeURIComponent(sanitizeQuery ? this.sanitizeQuery(query) : query);\r\n            let result = [];\r\n            if (this.client.key) {\r\n                const data = yield this.client.api.get(`/search?q=${term}`);\r\n                const parsed = JSON.parse(data);\r\n                result = parsed.response.hits;\r\n            }\r\n            else {\r\n                const res = yield got_1.default.get(`${((_a = this.client.config.origin) === null || _a === void 0 ? void 0 : _a.url) || Constants_1.Constants.UN_BASE_URL}/search/multi?per_page=5&q=${term}`, Object.assign(Object.assign({}, this.client.config.requestOptions), { headers: Object.assign({ \"User-Agent\": Constants_1.Constants.DEF_USER_AGENT }, (_b = this.client.config.requestOptions) === null || _b === void 0 ? void 0 : _b.headers) }));\r\n                const parsed = JSON.parse(res.body);\r\n                if (!((_c = parsed === null || parsed === void 0 ? void 0 : parsed.response) === null || _c === void 0 ? void 0 : _c.sections)) {\r\n                    throw new Error(Constants_1.Constants.NO_RESULT);\r\n                }\r\n                const __hits = parsed.response.sections.find((s) => s.type === \"song\");\r\n                if (!((_d = __hits === null || __hits === void 0 ? void 0 : __hits.hits) === null || _d === void 0 ? void 0 : _d.length)) {\r\n                    throw new Error(Constants_1.Constants.NO_RESULT);\r\n                }\r\n                result = __hits.hits;\r\n            }\r\n            return result\r\n                .filter((s) => s.type === \"song\")\r\n                .map((s) => new Song_1.Song(this.client, s.result, true));\r\n        });\r\n    }\r\n    /**\r\n     * Fetches the Song using the provided ID (Requires Key)\r\n     * @example const Song = await SongsClient.get(3276244);\r\n     */\r\n    get(id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (typeof id !== \"number\") {\r\n                throw new Error(\"'id' must be a type of 'number'\");\r\n            }\r\n            if (!this.client.key) {\r\n                throw new Error(Constants_1.Constants.REQUIRES_KEY);\r\n            }\r\n            const data = yield this.client.api.get(`/songs/${id}`);\r\n            const parsed = JSON.parse(data);\r\n            return new Song_1.Song(this.client, parsed.response.song, false);\r\n        });\r\n    }\r\n    // Source: https://github.com/farshed/genius-lyrics-api/blob/110397a9f05fe20c4ded92418430f665f074c4e4/lib/utils/index.js#L15\r\n    sanitizeQuery(query) {\r\n        return query\r\n            .toLowerCase()\r\n            .replace(/ *\\([^)]*\\) */g, \"\")\r\n            .replace(/ *\\[[^\\]]*]/, \"\")\r\n            .replace(/feat.|ft./g, \"\")\r\n            .replace(/\\s+/g, \" \")\r\n            .trim();\r\n    }\r\n}\r\nexports.SongsClient = SongsClient;\r\n"]},"metadata":{},"sourceType":"script"}