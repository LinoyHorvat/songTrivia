{"ast":null,"code":"var _jsxFileName = \"/Users/linoyhorvat/Documents/bootcamp/Git/Projects/mid-project/songTrivia/src/components/Game.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport Lyric from \"./Lyric\";\nimport { useHistory } from \"react-router-dom\";\nimport \"../index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Game() {\n  _s();\n\n  const songsArr = [\"we%20will%20rock%20you\", \"frozen\", \"Beat%20It\", \"Smells%20Like%20Teen%20Spirit\", \"Billie%20Jean\", \"let%20it%20be\", \"help\", \"hey%20jude\", \"come%20together\", \"yesterday\"];\n  const artistsArr = [\"queen\", \"madonna\", \"Michael%20Jackson\", \"Nirvana\", \"Michael%20Jackson\", \"the%20beatles\", \"the%20beatles\", \"the%20beatles\", \"the%20beatles\", \"the%20beatles\"];\n  let random = Math.floor(songsArr.length * Math.random());\n  const [randomNum, setRandomNum] = useState(random);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [score, setScore] = useState(0);\n  const [counter, setCounter] = useState(10);\n  localStorage.setItem(\"score\", JSON.stringify(score));\n  const history = useHistory();\n  const [style, setStyle] = useState({\n    color: 'rgba(47, 247, 7, 0.886)'\n  });\n  useEffect(() => {\n    counter > 0 && setTimeout(() => setCounter(counter - 1), 1000);\n\n    if (counter <= 5) {\n      setStyle({\n        color: \"red\"\n      });\n    }\n\n    if (counter === 0) {\n      history.push(\"/results\");\n    }\n  }, [counter]);\n  useEffect(() => {\n    console.log(songsArr[randomNum].split(\"%20\").join(\" \"));\n    randomChoice();\n  }, [score]);\n\n  const randomChoice = () => {\n    setRandomNum(random);\n  };\n\n  const handelBackBtn = () => {\n    window.history.back();\n  };\n\n  const handelInputChange = val => {\n    console.log(\"val\");\n    setInputValue(val);\n  };\n\n  const createLyrics = () => {\n    return /*#__PURE__*/_jsxDEV(Lyric, {\n      songName: songsArr[randomNum],\n      artistName: artistsArr[randomNum]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this);\n  };\n\n  const handleKeyDown = e => {\n    if (e.key === \"Enter\") {\n      if (inputValue == songsArr[randomNum].split(\"%20\").join(\" \").toLowerCase()) {\n        setScore(score => score + 1);\n        localStorage.setItem(\"score\", JSON.stringify(score + 1));\n        setInputValue(\"\");\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"countdown\",\n      style: style,\n      children: [\"Countdown: \", counter]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"input\",\n      placeholder: \"Guess The Song Name\",\n      type: \"text\",\n      value: inputValue,\n      onChange: event => handelInputChange(event.target.value),\n      onKeyDown: event => handleKeyDown(event)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"score\",\n      children: [\"score: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), createLyrics(), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handelBackBtn,\n      children: \"Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Game, \"LA1BdOZMl2zkRgOB+G8Ooxom2nA=\", false, function () {\n  return [useHistory];\n});\n\n_c = Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/linoyhorvat/Documents/bootcamp/Git/Projects/mid-project/songTrivia/src/components/Game.js"],"names":["React","useState","useEffect","Lyric","useHistory","Game","songsArr","artistsArr","random","Math","floor","length","randomNum","setRandomNum","inputValue","setInputValue","score","setScore","counter","setCounter","localStorage","setItem","JSON","stringify","history","style","setStyle","color","setTimeout","push","console","log","split","join","randomChoice","handelBackBtn","window","back","handelInputChange","val","createLyrics","handleKeyDown","e","key","toLowerCase","event","target","value"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport Lyric from \"./Lyric\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport \"../index.css\";\r\n\r\nexport default function Game() {\r\n  const songsArr = [\r\n    \"we%20will%20rock%20you\",\r\n    \"frozen\",\r\n    \"Beat%20It\",\r\n    \"Smells%20Like%20Teen%20Spirit\",\r\n    \"Billie%20Jean\",\r\n    \"let%20it%20be\",\r\n    \"help\",\r\n    \"hey%20jude\",\r\n    \"come%20together\",\r\n    \"yesterday\",\r\n  ];\r\n  const artistsArr = [\r\n    \"queen\",\r\n    \"madonna\",\r\n    \"Michael%20Jackson\",\r\n    \"Nirvana\",\r\n    \"Michael%20Jackson\",\r\n    \"the%20beatles\",\r\n    \"the%20beatles\",\r\n    \"the%20beatles\",\r\n    \"the%20beatles\",\r\n    \"the%20beatles\",\r\n  ];\r\n  let random = Math.floor(songsArr.length * Math.random());\r\n  const [randomNum, setRandomNum] = useState(random);\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const [score, setScore] = useState(0);\r\n  const [counter, setCounter] = useState(10);\r\n  localStorage.setItem(\"score\", JSON.stringify(score));\r\n  const history = useHistory();\r\n  const [style, setStyle] = useState({color: 'rgba(47, 247, 7, 0.886)'})\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    counter > 0 && setTimeout(() => setCounter(counter - 1), 1000);\r\n    if (counter <= 5) {\r\n      setStyle({color: \"red\"}) \r\n    }\r\n    if (counter === 0) {\r\n      history.push(\"/results\");\r\n    }\r\n  }, [counter]);\r\n\r\n  useEffect(() => {\r\n    console.log(songsArr[randomNum].split(\"%20\").join(\" \"));\r\n    randomChoice();\r\n  }, [score]);\r\n\r\n  const randomChoice = () => {\r\n    setRandomNum(random);\r\n  };\r\n  const handelBackBtn = () => {\r\n    window.history.back();\r\n  };\r\n  const handelInputChange = (val) => {\r\n    console.log(\"val\");\r\n    setInputValue(val);\r\n  };\r\n  const createLyrics = () => {\r\n    return (\r\n      <Lyric\r\n        songName={songsArr[randomNum]}\r\n        artistName={artistsArr[randomNum]}\r\n      />\r\n    );\r\n  };\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      if (\r\n        inputValue == songsArr[randomNum].split(\"%20\").join(\" \").toLowerCase()\r\n      ) {\r\n        setScore((score) => score + 1);\r\n        localStorage.setItem(\"score\", JSON.stringify(score + 1));\r\n        setInputValue(\"\");\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"countdown\" style={style}>Countdown: {counter}</div>\r\n      <input\r\n        className=\"input\"\r\n        placeholder=\"Guess The Song Name\"\r\n        type=\"text\"\r\n        value={inputValue}\r\n        onChange={(event) => handelInputChange(event.target.value)}\r\n        onKeyDown={(event) => handleKeyDown(event)} />\r\n      <button className=\"score\">score: {score}</button>\r\n      {createLyrics()}\r\n      <button onClick={handelBackBtn}>Back</button>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}