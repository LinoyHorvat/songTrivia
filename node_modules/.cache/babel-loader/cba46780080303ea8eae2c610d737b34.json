{"ast":null,"code":"var _jsxFileName = \"/Users/linoyhorvat/Documents/bootcamp/Git/Projects/mid-project/songTrivia/src/components/Game.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect } from \"react\";\nimport Lyric from \"./Lyric\";\nimport Countdown from 'react-countdown';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Game() {\n  _s();\n\n  const songsName = ['we%20will%20rock%20you', 'frozen', 'Beat%20It', 'Smells%20Like%20Teen%20Spirit', 'Billie%20Jean'];\n  const artistsArr = ['queen', 'madonna', 'Michael%20Jackson', 'Nirvana', 'Michael%20Jackson'];\n  let random = Math.floor(songsName.length * Math.random());\n  const [randomNum, setRandomNum] = useState(random);\n  const [inputValue, setInputValue] = useState('');\n  const [score, setScore] = useState(0);\n  const [counter, setCounter] = React.useState(60);\n  React.useEffect(() => {\n    counter > 0 && setTimeout(() => setCounter(counter - 1), 1000);\n  }, [counter]);\n  useEffect(() => {\n    randomChoice();\n  }, [inputValue]);\n\n  const randomChoice = () => {\n    // random = Math.floor(songsName.length*Math.random());\n    setRandomNum(random); // console.log(`randomChoice: ${random}`);\n\n    console.log(`randomChoice: ${randomNum}`);\n  };\n\n  const handelClick = () => {\n    window.history.back();\n    console.log(window.history.back);\n  };\n\n  const handelInputChange = val => {\n    randomChoice();\n    setInputValue(val);\n\n    if (inputValue == songsName[0].split('%20').join(' ')) {\n      console.log('correct');\n      setScore(score + 5);\n    }\n  };\n\n  const createLyrics = () => {\n    return /*#__PURE__*/_jsxDEV(Lyric, {\n      songName: songsName[randomNum],\n      artistName: artistsArr[randomNum]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 12\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(Countdown, {\n      date: Date.now() + 10000,\n      intervalDelay: 0,\n      precision: 3,\n      renderer: props => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: props.total\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 24\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"Guess The Song Name\",\n      type: \"text\",\n      value: inputValue,\n      onChange: event => handelInputChange(event.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"score\",\n      children: [\"score: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: randomNum\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }, this), createLyrics(), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handelClick,\n      children: \"Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }, this), console.log(inputValue)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Game, \"9Qk3uWkNlkI0w//49J7vLq6RnUU=\");\n\n_c = Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/linoyhorvat/Documents/bootcamp/Git/Projects/mid-project/songTrivia/src/components/Game.js"],"names":["React","useState","useEffect","Lyric","Countdown","Game","songsName","artistsArr","random","Math","floor","length","randomNum","setRandomNum","inputValue","setInputValue","score","setScore","counter","setCounter","setTimeout","randomChoice","console","log","handelClick","window","history","back","handelInputChange","val","split","join","createLyrics","Date","now","props","total","event","target","value"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { useState, useEffect } from \"react\";\r\nimport Lyric from \"./Lyric\"\r\nimport Countdown from 'react-countdown';\r\n\r\n\r\nexport default function Game() {\r\n  const songsName = ['we%20will%20rock%20you', 'frozen', 'Beat%20It','Smells%20Like%20Teen%20Spirit','Billie%20Jean']\r\n  const artistsArr =['queen', 'madonna','Michael%20Jackson','Nirvana','Michael%20Jackson']\r\n  let random = Math.floor(songsName.length*Math.random());\r\n  const [randomNum, setRandomNum] = useState(random);\r\n  const [inputValue, setInputValue] = useState('')\r\n  const [score, setScore] = useState(0);\r\n\r\n  const [counter, setCounter] = React.useState(60);\r\n  \r\n  React.useEffect(() => {\r\n    counter > 0 && setTimeout(() => setCounter(counter - 1), 1000);\r\n  }, [counter]);\r\n  \r\n  useEffect( () => {\r\n    randomChoice();\r\n  },[inputValue])\r\n  \r\n  const randomChoice = () => {\r\n    // random = Math.floor(songsName.length*Math.random());\r\n    setRandomNum(random)\r\n    // console.log(`randomChoice: ${random}`);\r\n    console.log(`randomChoice: ${randomNum}`);\r\n  }\r\n  const handelClick = () => {\r\n    window.history.back();\r\n    console.log(window.history.back);\r\n  }\r\n  const handelInputChange = (val) => {\r\n    randomChoice();\r\n    setInputValue(val)\r\n    if (inputValue == songsName[0].split('%20').join(' ')) {\r\n      console.log('correct');\r\n      setScore(score+5)\r\n    }\r\n  }\r\n  const createLyrics =() => {\r\n    return <Lyric songName = {songsName[randomNum]} artistName = {artistsArr[randomNum]}/>\r\n\r\n  }\r\n\r\n\r\n  return (\r\n\r\n    <div className = \"game-container\">\r\n    <Countdown\r\n    date={Date.now() + 10000}\r\n    intervalDelay={0}\r\n    precision={3}\r\n    renderer={props => <div>{props.total}</div>}\r\n  />\r\n    <input placeholder=\"Guess The Song Name\" type=\"text\" value = {inputValue} onChange={event => handelInputChange(event.target.value)}/>\r\n    <button className=\"score\">score: {score}</button>\r\n    <div>{randomNum}</div>\r\n    {createLyrics()}\r\n    <button onClick={handelClick}>Back</button>\r\n    {console.log(inputValue)}\r\n    </div>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}