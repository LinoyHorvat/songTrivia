{"ast":null,"code":"const fetch = require('node-fetch');\n\nconst htmlToText = require('html-to-text');\n\nconst encoding = require('encoding');\n\nconst delim1 = '</div></div></div></div><div class=\"hwc\"><div class=\"BNeawe tAd8D AP7Wnd\"><div><div class=\"BNeawe tAd8D AP7Wnd\">';\nconst delim2 = '</div></div></div></div></div><div><span class=\"hwc\"><div class=\"BNeawe uEec3 AP7Wnd\">';\nconst url = \"https://www.google.com/search?q=\";\n\nasync function main() {\n  let e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  let d = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n  let i;\n\n  try {\n    i = await fetch(`${url}${encodeURIComponent(d + \" \" + e)}+lyrics`);\n    i = await i.textConverted();\n    [, i] = i.split(delim1);\n    [i] = i.split(delim2);\n  } catch (m) {\n    try {\n      i = await fetch(`${url}${encodeURIComponent(d + \" \" + e)}+song+lyrics`);\n      i = await i.textConverted();\n      [, i] = i.split(delim1);\n      [i] = i.split(delim2);\n    } catch (n) {\n      try {\n        i = await fetch(`${url}${encodeURIComponent(d + \" \" + e)}+song`);\n        i = await i.textConverted();\n        [, i] = i.split(delim1);\n        [i] = i.split(delim2);\n      } catch (o) {\n        try {\n          i = await fetch(`${url}${encodeURIComponent(d + \" \" + e)}`);\n          i = await i.textConverted();\n          [, i] = i.split(delim1);\n          [i] = i.split(delim2);\n        } catch (p) {\n          i = '';\n        }\n      }\n    }\n  }\n\n  const ret = i.split('\\n');\n  let final = '';\n\n  for (let j = 0; j < ret.length; j += 1) {\n    final = `${final}${htmlToText.fromString(ret[j])}\\n`;\n  }\n\n  return String(encoding.convert(final)).trim();\n}\n\nmodule.exports = main;","map":{"version":3,"sources":["/Users/linoyhorvat/Documents/bootcamp/Git/Projects/mid-project/songTrivia/node_modules/lyrics-finder/src/index.js"],"names":["fetch","require","htmlToText","encoding","delim1","delim2","url","main","e","d","i","encodeURIComponent","textConverted","split","m","n","o","p","ret","final","j","length","fromString","String","convert","trim","module","exports"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,YAAD,CAArB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,cAAD,CAA1B;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAMG,MAAM,GAAG,kHAAf;AACA,MAAMC,MAAM,GAAG,wFAAf;AACA,MAAMC,GAAG,GAAG,kCAAZ;;AAEA,eAAeC,IAAf,GAAgC;AAAA,MAAZC,CAAY,uEAAV,EAAU;AAAA,MAANC,CAAM,uEAAJ,EAAI;AAC5B,MAAIC,CAAJ;;AACA,MAAI;AACAA,IAAAA,CAAC,GAAG,MAAMV,KAAK,CAAE,GAAEM,GAAI,GAAEK,kBAAkB,CAACF,CAAC,GAAG,GAAJ,GAAUD,CAAX,CAAc,SAA1C,CAAf;AACAE,IAAAA,CAAC,GAAG,MAAMA,CAAC,CAACE,aAAF,EAAV;AACA,OAAGF,CAAH,IAAQA,CAAC,CAACG,KAAF,CAAQT,MAAR,CAAR;AACA,KAACM,CAAD,IAAMA,CAAC,CAACG,KAAF,CAAQR,MAAR,CAAN;AACH,GALD,CAKE,OAAOS,CAAP,EAAU;AACR,QAAI;AACAJ,MAAAA,CAAC,GAAG,MAAMV,KAAK,CAAE,GAAEM,GAAI,GAAEK,kBAAkB,CAACF,CAAC,GAAG,GAAJ,GAAUD,CAAX,CAAc,cAA1C,CAAf;AACAE,MAAAA,CAAC,GAAG,MAAMA,CAAC,CAACE,aAAF,EAAV;AACA,SAAGF,CAAH,IAAQA,CAAC,CAACG,KAAF,CAAQT,MAAR,CAAR;AACA,OAACM,CAAD,IAAMA,CAAC,CAACG,KAAF,CAAQR,MAAR,CAAN;AACH,KALD,CAKE,OAAOU,CAAP,EAAU;AACR,UAAI;AACAL,QAAAA,CAAC,GAAG,MAAMV,KAAK,CAAE,GAAEM,GAAI,GAAEK,kBAAkB,CAACF,CAAC,GAAG,GAAJ,GAAUD,CAAX,CAAc,OAA1C,CAAf;AACAE,QAAAA,CAAC,GAAG,MAAMA,CAAC,CAACE,aAAF,EAAV;AACA,WAAGF,CAAH,IAAQA,CAAC,CAACG,KAAF,CAAQT,MAAR,CAAR;AACA,SAACM,CAAD,IAAMA,CAAC,CAACG,KAAF,CAAQR,MAAR,CAAN;AACH,OALD,CAKE,OAAOW,CAAP,EAAU;AACR,YAAI;AACAN,UAAAA,CAAC,GAAG,MAAMV,KAAK,CAAE,GAAEM,GAAI,GAAEK,kBAAkB,CAACF,CAAC,GAAG,GAAJ,GAAUD,CAAX,CAAc,EAA1C,CAAf;AACAE,UAAAA,CAAC,GAAG,MAAMA,CAAC,CAACE,aAAF,EAAV;AACA,aAAGF,CAAH,IAAQA,CAAC,CAACG,KAAF,CAAQT,MAAR,CAAR;AACA,WAACM,CAAD,IAAMA,CAAC,CAACG,KAAF,CAAQR,MAAR,CAAN;AACH,SALD,CAKE,OAAOY,CAAP,EAAU;AACRP,UAAAA,CAAC,GAAG,EAAJ;AACH;AACJ;AACJ;AACJ;;AACD,QAAMQ,GAAG,GAAGR,CAAC,CAACG,KAAF,CAAQ,IAAR,CAAZ;AACA,MAAIM,KAAK,GAAG,EAAZ;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAAG,CAACG,MAAxB,EAAgCD,CAAC,IAAI,CAArC,EAAwC;AACpCD,IAAAA,KAAK,GAAI,GAAEA,KAAM,GAAEjB,UAAU,CAACoB,UAAX,CAAsBJ,GAAG,CAACE,CAAD,CAAzB,CAA8B,IAAjD;AACH;;AACD,SAAOG,MAAM,CAACpB,QAAQ,CAACqB,OAAT,CAAiBL,KAAjB,CAAD,CAAN,CAAgCM,IAAhC,EAAP;AACH;;AACDC,MAAM,CAACC,OAAP,GAAiBpB,IAAjB","sourcesContent":["const fetch = require('node-fetch');\nconst htmlToText = require('html-to-text');\nconst encoding = require('encoding');\nconst delim1 = '</div></div></div></div><div class=\"hwc\"><div class=\"BNeawe tAd8D AP7Wnd\"><div><div class=\"BNeawe tAd8D AP7Wnd\">';\nconst delim2 = '</div></div></div></div></div><div><span class=\"hwc\"><div class=\"BNeawe uEec3 AP7Wnd\">';\nconst url = \"https://www.google.com/search?q=\";\n\nasync function main(e=\"\", d=\"\") {\n    let i;\n    try {\n        i = await fetch(`${url}${encodeURIComponent(d + \" \" + e)}+lyrics`);\n        i = await i.textConverted();\n        [, i] = i.split(delim1);\n        [i] = i.split(delim2);\n    } catch (m) {\n        try {\n            i = await fetch(`${url}${encodeURIComponent(d + \" \" + e)}+song+lyrics`);\n            i = await i.textConverted();\n            [, i] = i.split(delim1);\n            [i] = i.split(delim2);\n        } catch (n) {\n            try {\n                i = await fetch(`${url}${encodeURIComponent(d + \" \" + e)}+song`);\n                i = await i.textConverted();\n                [, i] = i.split(delim1);\n                [i] = i.split(delim2);\n            } catch (o) {\n                try {\n                    i = await fetch(`${url}${encodeURIComponent(d + \" \" + e)}`);\n                    i = await i.textConverted();\n                    [, i] = i.split(delim1);\n                    [i] = i.split(delim2);\n                } catch (p) {\n                    i = '';\n                }\n            }\n        }\n    }\n    const ret = i.split('\\n');\n    let final = '';\n    for (let j = 0; j < ret.length; j += 1) {\n        final = `${final}${htmlToText.fromString(ret[j])}\\n`;\n    }\n    return String(encoding.convert(final)).trim();\n}\nmodule.exports = main;\n"]},"metadata":{},"sourceType":"script"}